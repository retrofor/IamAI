[project]
name = "iamai"
version = "3.2.5"
description = "A bot Framework."
authors = [{ name = "简律纯", email = "i@jyunko.cn" }]
license = { text = "MIT" }
readme = "README.md"
keywords = [
  "bot",
  "red",
  "kook",
  "onebot11",
  "dingtalk",
  "console",
  "apscheduler",
  "bilibili",
  "bilibili-live",
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Framework :: AsyncIO",
  "Framework :: Robot Framework",
  "Framework :: Robot Framework :: Library",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Topic :: Communications :: Chat",
]
requires-python = ">=3.8"
dependencies = [
  "tomli>=2.0.0,<3.0.0;python_version<'3.11'",
  "pydantic>=2.0.3,<3.0.0",
  "aiohttp>=3.8.0,<4.0.0",
  "loguru>=0.7.0,<0.8.0",
  "typing-extensions>=4.5.0",
]

[project.optional-dependencies]
onebot11 = ["iamai-adapter-onebot11"]
bililive = ["iamai-adapter-bililive"]
mirai = ["iamai-adapter-mirai"]
dingtalk = ["iamai-adapter-dingtalk"]
apscheduler = ["iamai-adapter-apscheduler"]
red = ["iamai-adapter-red"]
console = ["iamai-adapter-console"]
kook = ["iamai-adapter-kook"]
hot_reload = ["watchfiles"]
all = [
  "iamai-adapter-bililive",
  "iamai-adapter-onebot11",
  "iamai-adapter-mirai",
  "iamai-adapter-dingtalk",
  "iamai-adapter-apscheduler",
  "iamai-adapter-console",
  "iamai-adapter-kook",
  "watchfiles",
]

[tool.pdm.dev-dependencies]
dev = [
  "-e iamai-adapter-bililive @ {root:uri}/packages/iamai-adapter-bililive",
  "-e iamai-adapter-console @ {root:uri}/packages/iamai-adapter-console",
  "-e iamai-adapter-kook @ {root:uri}/packages/iamai-adapter-kook",
  "-e iamai-adapter-onebot11 @ {root:uri}/packages/iamai-adapter-onebot11",
  "-e iamai-adapter-mirai @ {root:uri}/packages/iamai-adapter-mirai",
  "-e iamai-adapter-dingtalk @ {root:uri}/packages/iamai-adapter-dingtalk",
  "-e iamai-adapter-apscheduler @ {root:uri}/packages/iamai-adapter-apscheduler",
]
typing = [ # used only in type check
  "watchfiles",
  "trio>=0.22.2", # watchfiles used this lib
]
lint = ["black", "ruff", "mypy", "pylint", "pylint-pydantic"]
docs = ["sophia-doc~=0.1.4", "tomlkit"]
test = ["pytest", "pytest-asyncio", "pytest-xdist", "pytest-cov"]

[project.urls]
Homepage = "https://iamai.retrofor.space/"
Documentation = "https://iamai.retrofor.space/"
Repository = "https://github.com/retrofor/iamai"
Changelog = "https://iamai.retrofor.space/changelog.html"

[tool.black]
target-version = ["py38", "py39", "py310", "py311"]

[tool.ruff]
line-length = 88
select = ["ALL"]
ignore = [
  "C90",     # mccabe
  "BLE",     # flake8-blind-except
  "FBT",     # flake8-boolean-trap
  "COM",     # flake8-commas
  "EM",      # flake8-errmsg
  "INP",     # flake8-no-pep420
  "TID",     # flake8-tidy-imports
  "E501",    # Line too long, handled by black
  "D415",    # First line should end with a period, question mark, or exclamation point
  "ANN101",  # Missing type annotation for self
  "ANN102",  # Missing type annotation for cls
  "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed
  "S101",    # Use of assert detected
  "PGH003",  # Use specific rule codes when ignoring type issues
  "PLR0912", # Too many branches
  "PLR0913", # Too many arguments to function call
  "TRY003",  # Avoid specifying long messages outside the exception class
  "PERF203", # try-except within a loop incurs performance overhead
  "RUF001",  # String contains ambiguous unicode character string
  "RUF002",  # Docstring contains ambiguous unicode character string
  "RUF003",  # Comment contains ambiguous unicode character string
]
target-version = "py38"

[tool.ruff.flake8-builtins]
builtins-ignorelist = ["id", "type"]

[tool.ruff.isort]
known-third-party = ["pydantic", "aiohttp", "loguru"]
extra-standard-library = ["typing_extensions"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.pyflakes]
extend-generics = [
  "iamai.plugin.Plugin",
  "iamai.adapter.Adapter",
  "iamai.event.Event",
  "iamai.event.MessageEvent",
  "iamai.message.Message",
  "iamai.message.MessageSegment",
]

[tool.ruff.pyupgrade]
keep-runtime-typing = true

[tool.ruff.per-file-ignores]
"packages/*/iamai/__init__.py" = ["D104"]
"packages/*/iamai/adapter/__init__.py" = ["D104"]
"examples/plugins/*.py" = ["D", "T", "ANN"]
"tests/*.py" = ["D", "PLR2004"]

[tool.pyright]
ignore = ["examples/plugins"]
pythonVersion = "3.8"
pythonPlatform = "All"
typeCheckingMode = "strict"
reportMissingTypeStubs = false
reportUnknownMemberType = false
reportUnnecessaryIsInstance = false
reportCallInDefaultInitializer = true
reportPropertyTypeMismatch = true
reportShadowedImports = true
reportUninitializedInstanceVariable = true

[tool.mypy]
python_version = "3.8"
strict = true
exclude = [
  '^packages/.*/iamai/__init__\.py$',
  '^packages/.*/iamai/adapter/__init__\.py$',
  '^examples/.*\.py$',
]
warn_return_any = false

[[tool.mypy.overrides]]
module = "apscheduler.*"
ignore_missing_imports = true

[tool.pylint.main]
disable = [
  "arguments-differ",
  "broad-exception-caught",
  "import-outside-toplevel",
  "line-too-long",
  "too-many-lines",
  "duplicate-code",
  "too-few-public-methods",
  "too-many-arguments",
  "too-many-boolean-expressions",
  "too-many-branches",
  "too-many-instance-attributes",
  "too-many-nested-blocks",
  "too-many-public-methods",
]
load-plugins = ["pylint_pydantic"]
source-roots = ["."]

[tool.pylint.variables]
allowed-redefined-builtins = ["id", "type"]

[tool.pytest.ini_options]
log_cli = true
testpaths = "tests"
addopts = "--cov=iamai --cov-report=term-missing"

[tool.coverage.run]
omit = ["iamai/adapter/utils.py"]

[tool.coverage.report]
exclude_also = [
  "raise NotImplementedError",
  "if TYPE_CHECKING:",
  "@overload",
  "@(abc\\.)?abstractmethod",
]

[tool.hatch.build.targets.sdist]
include = ["/README.md", "/iamai"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
